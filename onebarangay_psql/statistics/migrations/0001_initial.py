# Generated by Django 4.0.2 on 2022-02-22 09:27

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AgeGroupMaterializedView',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=50)),
                ('value', models.PositiveBigIntegerField()),
                ('total_age', models.IntegerField()),
            ],
            options={
                'db_table': 'materialized_statistics_age_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AppointmentMaterializedView',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=50)),
                ('value', models.PositiveBigIntegerField()),
            ],
            options={
                'db_table': 'materialized_statistics_appointment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AverageMaterializedView',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=50)),
                ('value', models.PositiveBigIntegerField()),
            ],
            options={
                'db_table': 'materialized_statistics_average',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CitizenshipMaterializedView',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=50)),
                ('value', models.PositiveBigIntegerField()),
            ],
            options={
                'db_table': 'materialized_statistics_citizenship',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CivilStatusMaterializedView',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=50)),
                ('value', models.PositiveBigIntegerField()),
            ],
            options={
                'db_table': 'materialized_statistics_civil_status',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SocialClassMaterializedView',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=50)),
                ('value', models.PositiveBigIntegerField()),
                ('max_income', models.PositiveBigIntegerField()),
            ],
            options={
                'db_table': 'materialized_statistics_social_class',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TotalMaterializedView',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=30)),
                ('value', models.PositiveBigIntegerField()),
            ],
            options={
                'db_table': 'materialized_statistics_total',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserLogInMaterializedView',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=50)),
                ('value', models.PositiveBigIntegerField()),
            ],
            options={
                'db_table': 'materialized_statistics_user_login',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserSignUpMaterializedView',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=20)),
                ('year', models.CharField(max_length=4)),
                ('value', models.PositiveBigIntegerField()),
            ],
            options={
                'db_table': 'materialized_statistics_user_signup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserSignUpMonthlyMaterializedView',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=20)),
                ('value', models.PositiveBigIntegerField()),
            ],
            options={
                'db_table': 'materialized_statistics_user_signup_monthly',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserLoginMonthlyMaterializedView',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=20)),
                ('value', models.PositiveBigIntegerField()),
            ],
            options={
                'db_table': 'materialized_statistics_user_login_monthly',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RefreshMaterializedView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.DurationField(auto_created=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
            ],
            options={
                'verbose_name': 'refresh',
                'verbose_name_plural': 'refreshes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.RunSQL(
            """
            CREATE MATERIALIZED VIEW materialized_statistics_total AS
            WITH total_cte as (
                SELECT 'Total Appointment' as label, COUNT(*) as value
                FROM public.appointment_appointment
                UNION ALL
                SELECT 'Total Announcement' as label, COUNT(*) as value
                FROM public.announcement_announcement
                UNION ALL
                SELECT 'Total Users' as label, COUNT(*) as value
                FROM public.users_user
                UNION ALL
                SELECT 'Total Houses' as label, COUNT(*) as value
                FROM public.rbi_houserecord
                UNION ALL
                SELECT 'Total Population' as label, COUNT(*) as value
                FROM public.rbi_familymember
            )
            SELECT ROW_NUMBER() OVER (ORDER BY label) AS id, *
            FROM total_cte;

            CREATE MATERIALIZED VIEW materialized_statistics_user_signup AS
            WITH user_signup_cte as (
                SELECT TRIM(TRAILING FROM to_char(date_joined, 'Month')) AS label, to_char(date_joined, 'YYYY') as year, count(*) AS value
                FROM users_user
                GROUP BY label, year
                ORDER BY year, label DESC
                LIMIT 12
            )
            SELECT ROW_NUMBER() OVER (ORDER BY year, label DESC) AS id, *
            FROM user_signup_cte;

            CREATE MATERIALIZED VIEW materialized_statistics_appointment AS
            WITH RECURSIVE
                current_week_cte as (
                    SELECT (current_date + i) as week_date
                    from generate_series(0, 6) i
                ),
                appointment_by_day_cte as (
                    SELECT DISTINCT(to_char(start_appointment, 'MonthDD, YYYY')) as label, COUNT(start_appointment) as value
                    FROM public.appointment_appointment
                    WHERE start_appointment::date in (
                        SELECT *
                        FROM current_week_cte
                    )
                    GROUP BY label
                    ORDER BY label
                    LIMIT 7
                )
            SELECT ROW_NUMBER() OVER (ORDER BY label) AS id, *
            FROM appointment_by_day_cte;

            CREATE MATERIALIZED VIEW materialized_statistics_user_login AS
            WITH RECURSIVE
                previous_week_cte as (
                    SELECT (current_date - i) as week_date
                    from generate_series(0, 7) i
                ),
                user_login_by_day_cte as (
                    SELECT to_char(last_login
                        , 'MonthDD, YYYY')   as label
                         , COUNT(last_login) as value
                    FROM public.users_user
                    WHERE last_login::date in (
                        SELECT *
                        FROM previous_week_cte
                    )
                    GROUP BY label
                    ORDER BY label
                    LIMIT 7
                )
            SELECT ROW_NUMBER() OVER (ORDER BY label) AS id, *
            FROM user_login_by_day_cte;

            CREATE MATERIALIZED VIEW materialized_statistics_age_group AS
            WITH RECURSIVE
                age_group_cte as (
                    SELECT age,
                           CASE
                               WHEN age >= 0 and age < 2 THEN 'Infant'
                               WHEN age >= 2 and age < 4 THEN 'Toddler'
                               WHEN age >= 4 and age < 13 THEN 'Kid'
                               WHEN age >= 13 and age < 20 THEN 'Teen'
                               WHEN age >= 20 THEN 'Adult'
                               END age_group
                    FROM rbi_familymember
                ),
                age_group_frequency_cte as (
                    SELECT DISTINCT(age_group) as label, COUNT(age) as value, SUM(age) as total_age
                    FROM age_group_cte
                    GROUP BY age_group
                )
            SELECT ROW_NUMBER() OVER (ORDER BY total_age) AS id, *
            FROM age_group_frequency_cte;


            CREATE MATERIALIZED VIEW materialized_statistics_citizenship AS
            WITH citizenship_cte as (
                SELECT DISTINCT(citizenship) as label, COUNT(citizenship) as value
                FROM rbi_familymember
                GROUP BY citizenship
            )
            SELECT ROW_NUMBER() OVER (ORDER BY label) AS id, *
            FROM citizenship_cte;

            CREATE MATERIALIZED VIEW materialized_statistics_civil_status AS
            WITH civil_status_cte as (
                SELECT CASE civil_status
                           WHEN 'CH' THEN 'Cohabiting'
                           WHEN 'MD' THEN 'Married'
                           WHEN 'WD' THEN 'Widowed'
                           WHEN 'SP' THEN 'Separated'
                           WHEN 'DV' THEN 'Divorced'
                           WHEN 'SI' THEN 'Single'
                           END             as label,
                       COUNT(civil_status) as value
                FROM rbi_familymember
                GROUP BY civil_status
            )
            SELECT ROW_NUMBER() OVER (ORDER BY label) AS id, *
            FROM civil_status_cte;

            CREATE MATERIALIZED VIEW materialized_statistics_average AS
            WITH RECURSIVE
                income_bounds AS (
                    SELECT (AVG(monthly_income) - STDDEV_SAMP(monthly_income) * 1.959) as lower_bound,
                           (AVG(monthly_income) + STDDEV_SAMP(monthly_income) * 1.959) as upper_bound
                    FROM rbi_familymember
                ),
                family_count AS (
                    SELECT COUNT(house_record_id) as num_family
                    FROM rbi_familymember
                    GROUP BY house_record_id
                    ORDER BY house_record_id
                ),
                family_bounds AS (
                    SELECT (AVG(num_family) - STDDEV_SAMP(num_family) * 1.959) as lower_bound,
                           (AVG(num_family) + STDDEV_SAMP(num_family) * 1.959) as upper_bound
                    FROM family_count
                ),
                average_frequency_cte as (
                    SELECT 'Average Family Number per House' as label, ROUND(AVG(num_family)::numeric(10)) as value
                    FROM family_count
                    WHERE num_family BETWEEN (SELECT lower_bound FROM family_bounds) AND (SELECT upper_bound FROM family_bounds)
                    UNION ALL
                    SELECT 'Average Salary' as label, AVG(monthly_income)::numeric(10, 2) as value
                    FROM rbi_familymember
                    WHERE monthly_income BETWEEN (SELECT lower_bound FROM income_bounds) AND (SELECT upper_bound FROM income_bounds)
                )
            SELECT ROW_NUMBER() OVER (ORDER BY label) AS id, *
            FROM average_frequency_cte;

            CREATE MATERIALIZED VIEW materialized_statistics_social_class AS
            WITH RECURSIVE
                social_class_cte as (
                    SELECT monthly_income,
                           CASE
                               WHEN monthly_income > 0 and monthly_income < 7890 THEN 'Poor'
                               WHEN monthly_income >= 7890 and monthly_income < 15780 THEN 'Low Income'
                               WHEN monthly_income >= 15780 and monthly_income < 78900 THEN 'Lower Middle Income'
                               WHEN monthly_income >= 78900 and monthly_income < 118350 THEN 'Middle Middle Income'
                               WHEN monthly_income >= 118350 and monthly_income < 200000 THEN 'Upper Middle Income'
                               WHEN monthly_income >= 200000 and monthly_income < 500000 THEN 'Upper Income'
                               WHEN monthly_income >= 500000 THEN 'Rich'
                               ELSE 'Not Applicable'
                               END social_class
                    FROM rbi_familymember
                ),
                social_class_frequency_cte as (
                    SELECT DISTINCT(social_class) as label, COUNT(social_class) as value, Max(monthly_income) as max_income
                    FROM social_class_cte
                    GROUP BY social_class
                    ORDER BY max_income
                )
            SELECT ROW_NUMBER() OVER (ORDER BY max_income) AS id, *
            FROM social_class_frequency_cte;
            
            CREATE MATERIALIZED VIEW materialized_statistics_user_signup_monthly AS
            WITH RECURSIVE
                past_six_months_cte as (
                    SELECT generate_series(now() - INTERVAL '6 month', now(), interval '1 month')::date as label
                    LIMIT 7
                ),
                user_signup_cte as (
                    SELECT t.label,
                           CASE WHEN u.date_joined IS NULL THEN 0 ELSE 1
                           END as value
                    FROM (SELECT label FROM past_six_months_cte) AS t
                    LEFT JOIN users_user AS u
                        ON to_char(u.date_joined, 'YYYY-MM') = to_char(t.label, 'YYYY-MM')
                    GROUP BY t.label, u.date_joined
                    ORDER BY t.label
                )
            SELECT ROW_NUMBER() OVER (ORDER BY label, label DESC) AS id, to_char(label, 'Mon, yyyy') as label, sum(value) as value
            FROM user_signup_cte
            GROUP BY label;
            
            CREATE MATERIALIZED VIEW materialized_statistics_user_login_monthly AS
            WITH RECURSIVE
                past_six_months_cte as (
                    SELECT generate_series(now() - INTERVAL '6 month', now(), interval '1 month')::date as label
                    LIMIT 7
                ),
                user_login_cte as (
                  SELECT t.label,
                         CASE WHEN u.last_login IS NULL THEN 0 ELSE 1
                         END as value
                  FROM (SELECT label FROM past_six_months_cte) AS t
                  LEFT JOIN users_user as u
                      ON to_char(last_login, 'YYYY-MM') = to_char(t.label, 'YYYY-MM')
                  GROUP BY t.label, u.last_login
                  ORDER BY t.label
                )
            SELECT ROW_NUMBER() OVER (ORDER BY label, label DESC) AS id, to_char(label, 'Mon, yyyy') as label, sum(value) as value
            FROM user_login_cte
            GROUP BY label;

            CREATE UNIQUE INDEX ON materialized_statistics_total(id);
            CREATE UNIQUE INDEX ON materialized_statistics_user_signup(id);
            CREATE UNIQUE INDEX ON materialized_statistics_appointment(id);
            CREATE UNIQUE INDEX ON materialized_statistics_user_login(id);
            CREATE UNIQUE INDEX ON materialized_statistics_age_group(id);
            CREATE UNIQUE INDEX ON materialized_statistics_citizenship(id);
            CREATE UNIQUE INDEX ON materialized_statistics_civil_status(id);
            CREATE UNIQUE INDEX ON materialized_statistics_average(id);
            CREATE UNIQUE INDEX ON materialized_statistics_social_class(id);
            CREATE UNIQUE INDEX ON materialized_statistics_user_signup_monthly(id);
            CREATE UNIQUE INDEX ON materialized_statistics_user_login_monthly(id);
            """,
            """
            DROP MATERIALIZED VIEW IF EXISTS materialized_statistics_total;
            DROP MATERIALIZED VIEW IF EXISTS materialized_statistics_user_signup;
            DROP MATERIALIZED VIEW IF EXISTS materialized_statistics_appointment;
            DROP MATERIALIZED VIEW IF EXISTS materialized_statistics_user_login;
            DROP MATERIALIZED VIEW IF EXISTS materialized_statistics_age_group;
            DROP MATERIALIZED VIEW IF EXISTS materialized_statistics_citizenship;
            DROP MATERIALIZED VIEW IF EXISTS materialized_statistics_civil_status;
            DROP MATERIALIZED VIEW IF EXISTS materialized_statistics_average;
            DROP MATERIALIZED VIEW IF EXISTS materialized_statistics_social_class;
            DROP MATERIALIZED VIEW IF EXISTS materialized_statistics_user_signup_monthly;
            DROP MATERIALIZED VIEW IF EXISTS materialized_statistics_user_login_monthly;
            """,
        ),
    ]
